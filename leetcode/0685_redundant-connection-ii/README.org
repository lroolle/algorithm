#+TITLE: 0685. Redundant Connection II
#+DATE: 2020-09-18 12:09
#+LAST_MODIFIED: 2020-09-18 12:09
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0685-redundant-connection-ii
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Tree DepthfirstSearch UnionFind Graph

* Solution
** Solution 1: Union Find
*** Cases

1. 有环
2. 冲突 ：一个点有两个父节点

- 有环无冲突
#+BEGIN_EXAMPLE
[[1, 2], [2, 3], [3, 1]]

1 -> 2
^︎   /
 \ v
  3

[3, 1]
#+END_EXAMPLE

- 有环有冲突
#+BEGIN_EXAMPLE
[[1, 2], [2, 3], [3, 1], [4, 2]]
[[1, 2], [2, 3], [3, 1], [4, 2]]

1 -> 2 <- 4
^︎   /
 \ v
  3

[1, 2]
#+END_EXAMPLE

- 无环有冲突 [[1,2],[1,3],[2,3]]
#+BEGIN_EXAMPLE
[[1, 2], [1, 3], [2, 3]]

1 -> 2
︎\   /
 v v
  3

[2, 3]
#+END_EXAMPLE

*** 思路

1. 如果构成环，也就是都是度为 1，则返回构成环的最后一条边；
2. 有冲突情形，即有度为 2 的两条边，则要删除的边一定是其中之一；

*** Python

#+BEGIN_SRC python :exports both :results output
class UnionFind(object):
    def __init__(self, n):
        self.pre = list(range(n))

    def find(self, x):
        if x != self.pre[x]:
            self.pre[x] = self.find(self.pre[x])
        return self.pre[x]

    def union(self, x1, x2):
        root1 = self.find(x1)
        root2 = self.find(x2)
        if root1 != root2:
            self.pre[root2] = root1
            return False

        return True


class Solution(object):
    def findRedundantDirectedConnection(self, edges):
        n = len(edges)
        uf = UnionFind(n + 1)

        last = []
        parent = {}
        candidates = []
        for st, ed in edges:
            if ed in parent:
                candidates.append([parent[ed], ed])
                candidates.append([st, ed])
            else:
                parent[ed] = st
                if uf.union(st, ed):
                    last = [st, ed]

        if not candidates:
            return last

        return candidates[0] if last else candidates[1]


if __name__ == "__main__":

    e1 = [[1, 2], [2, 3], [3, 1]]
    e2 = [[1, 2], [2, 3], [3, 1], [4, 2]]
    e3 = [[1, 2], [1, 3], [2, 3]]

    # print(Solution().findRedundantDirectedConnection(e1))
    print(Solution().findRedundantDirectedConnection(e2))
    print(Solution().findRedundantDirectedConnection(e3))
#+END_SRC

#+RESULTS:
#+begin_example
1 2 [0, 1, 1, 3, 4]
2 3 [0, 1, 1, 1, 4]
3 1 [0, 1, 1, 1, 4]
last:  [3, 1]
[0, 1, 1, 1, 4]
[1, 2]
1 2 [0, 1, 1, 3]
1 3 [0, 1, 1, 1]
[0, 1, 1, 1]
[2, 3]
#+end_example

* [[https://leetcode.com/problems/redundant-connection-ii/][0685. Redundant Connection II]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Hard U:134 D:0 AC:40.9% F:0.0
#+end_quote

In this problem, a rooted tree is a *directed* graph such that, there is
exactly one node (the root) for which all other nodes are descendants of
this node, plus every node has exactly one parent, except for the root
node which has no parents.

The given input is a directed graph that started as a rooted tree with N
nodes (with distinct values 1, 2, ..., N), with one additional directed
edge added. The added edge has two different vertices chosen from 1 to
N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of =edges=. Each element of
=edges= is a pair =[u, v]= that represents a *directed* edge connecting
nodes =u= and =v=, where =u= is a parent of child =v=.

Return an edge that can be removed so that the resulting graph is a
rooted tree of N nodes. If there are multiple answers, return the answer
that occurs last in the given 2D-array.

*Example 1:*\\

#+BEGIN_EXAMPLE
  Input: [[1,2], [1,3], [2,3]]
  Output: [2,3]
  Explanation: The given directed graph will be like this:
    1
   / \
  v   v
  2-->3
#+END_EXAMPLE

*Example 2:*\\

#+BEGIN_EXAMPLE
  Input: [[1,2], [2,3], [3,4], [4,1], [1,5]]
  Output: [4,1]
  Explanation: The given directed graph will be like this:
  5 <- 1 -> 2
       ^    |
       |    v
       4 <- 3
#+END_EXAMPLE

*Note:*\\

The size of the input 2D-array will be between 3 and 1000.

Every integer represented in the 2D-array will be between 1 and N, where
N is the size of the input array.
** Topic Tags
1. [[https://leetcode.com/tag/tree/][Tree]]
2. [[https://leetcode.com/tag/depth-first-search/][Depth-first Search]]
3. [[https://leetcode.com/tag/union-find/][Union Find]]
4. [[https://leetcode.com/tag/graph/][Graph]]

** Similar Problems
*** [[https://leetcode.com/problems/redundant-connection/][0684. Redundant Connection]]
** Companies
*** 2. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 2. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 2
*** 2. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 2
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 0
*** 3. [[https://leetcode-cn.com/company/adobe/][奥多比 Adobe]] * 0
*** 3. [[https://leetcode-cn.com/company/yahoo/][雅虎 Yahoo]] * 0
*** 3. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 0
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 0
* [[https://leetcode-cn.com/problems/redundant-connection-ii/][0685. 冗余连接 II]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Hard U:134 D:0 AC:40.9% F:0.0
#+end_quote

在本问题中，有根树指满足以下条件的*有向*图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。

输入一个有向图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N)
的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。

结果图是一个以=边=组成的二维数组。 每一个=边= 的元素是一对
=[u, v]=，用以表示*有向*图中连接顶点 =u= 和顶点 =v= 的边，其中 =u= 是
=v= 的一个父节点。

返回一条能删除的边，使得剩下的图是有N个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。

*示例 1:*

#+BEGIN_EXAMPLE
  输入: [[1,2], [1,3], [2,3]]
  输出: [2,3]
  解释: 给定的有向图如下:
    1
   / \
  v   v
  2-->3
#+END_EXAMPLE

*示例 2:*

#+BEGIN_EXAMPLE
  输入: [[1,2], [2,3], [3,4], [4,1], [1,5]]
  输出: [4,1]
  解释: 给定的有向图如下:
  5 <- 1 -> 2
       ^    |
       |    v
       4 <- 3
#+END_EXAMPLE

*注意:*

- 二维数组大小的在3到1000范围内。
- 二维数组中的每个整数在1到N之间，其中 N 是二维数组的大小。
** Topic Tags
1. [[https://leetcode-cn.com/tag/tree/][树]]
2. [[https://leetcode-cn.com/tag/depth-first-search/][深度优先搜索]]
3. [[https://leetcode-cn.com/tag/union-find/][并查集]]
4. [[https://leetcode-cn.com/tag/graph/][图]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/redundant-connection/][0684. 冗余连接]]
** Companies
*** 2. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 2. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 2
*** 2. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 2
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 0
*** 3. [[https://leetcode-cn.com/company/adobe/][奥多比 Adobe]] * 0
*** 3. [[https://leetcode-cn.com/company/yahoo/][雅虎 Yahoo]] * 0
*** 3. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 0
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 0
