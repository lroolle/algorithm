#+TITLE: 0141. Linked List Cycle
#+DATE: 2020-10-09 22:04
#+LAST_MODIFIED: 2020-10-09 22:04
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0141-linked-list-cycle
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms LinkedList TwoPointers

* [[https://leetcode.com/problems/linked-list-cycle/][0141. Linked List Cycle]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Easy U:3370 D:553 AC:41.6% F:0
#+end_quote

Given =head=, the head of a linked list, determine if the linked list
has a cycle in it.

There is a cycle in a linked list if there is some node in the list that
can be reached again by continuously following the =next= pointer.
Internally, =pos= is used to denote the index of the node
that tail's =next= pointer is connected to. *Note that =pos= is not
passed as a parameter*.

Return =true= /if there is a cycle in the linked list/. Otherwise,
return =false=.

*Follow up:*

Can you solve it using =O(1)= (i.e. constant) memory?

 

*Example 1:*

[[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png]]

#+BEGIN_EXAMPLE
  Input: head = [3,2,0,-4], pos = 1
  Output: true
  Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
#+END_EXAMPLE

*Example 2:*

[[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png]]

#+BEGIN_EXAMPLE
  Input: head = [1,2], pos = 0
  Output: true
  Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
#+END_EXAMPLE

*Example 3:*

[[https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png]]

#+BEGIN_EXAMPLE
  Input: head = [1], pos = -1
  Output: false
  Explanation: There is no cycle in the linked list.
#+END_EXAMPLE

 

*Constraints:*

- The number of the nodes in the list is in the range =[0, 104]=.
- =-105 <= Node.val <= 105=
- =pos= is =-1= or a *valid index* in the linked-list.
** Topic Tags
1. [[https://leetcode.com/tag/linked-list/][Linked List]]
2. [[https://leetcode.com/tag/two-pointers/][Two Pointers]]

** Similar Problems
*** [[https://leetcode.com/problems/linked-list-cycle-ii/][0142. Linked List Cycle II]]
*** [[https://leetcode.com/problems/happy-number/][0202. Happy Number]]

* [[https://leetcode-cn.com/problems/linked-list-cycle/][0141. 环形链表]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Easy U:810 D:0 AC:50.1% F:0
#+end_quote

给定一个链表，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 =next=
指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数
=pos= 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 =pos= 是
=-1=，则在该链表中没有环。*注意：=pos=
不作为参数进行传递*，仅仅是为了标识链表的实际情况。

如果链表中存在环，则返回 =true= 。 否则，返回 =false= 。

 

*进阶：*

你能用 /O(1)/（即，常量）内存解决此问题吗？

 

*示例 1：*

[[https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png]]

#+BEGIN_EXAMPLE
  输入：head = [3,2,0,-4], pos = 1
  输出：true
  解释：链表中有一个环，其尾部连接到第二个节点。
#+END_EXAMPLE

*示例 2：*

[[https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png]]

#+BEGIN_EXAMPLE
  输入：head = [1,2], pos = 0
  输出：true
  解释：链表中有一个环，其尾部连接到第一个节点。
#+END_EXAMPLE

*示例 3：*

[[https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png]]

#+BEGIN_EXAMPLE
  输入：head = [1], pos = -1
  输出：false
  解释：链表中没有环。
#+END_EXAMPLE

 

*提示：*

- 链表中节点的数目范围是 =[0, 104]=
- =-105 <= Node.val <= 105=
- =pos= 为 =-1= 或者链表中的一个 *有效索引* 。
** Topic Tags
1. [[https://leetcode-cn.com/tag/linked-list/][链表]]
2. [[https://leetcode-cn.com/tag/two-pointers/][双指针]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/linked-list-cycle-ii/][0142. 环形链表 II]]
*** [[https://leetcode-cn.com/problems/happy-number/][0202. 快乐数]]

