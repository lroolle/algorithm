#+TITLE: 0020. Valid Parentheses
#+DATE: 2020-09-16 00:08
#+LAST_MODIFIED: 2020-09-16 00:08
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0020-valid-parentheses
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Stack String

* Solution

** Solution 1: Stack

#+BEGIN_EXAMPLE
"({[]})"

Push Stack: ["(", ]
Push Stack: ["(", "{"]
Push Stack: ["(", "{", "["]
Pop  Stack: ["(", "{"]
Pop  Stack: ["("]
Pop  Stack: []

return len(stack) == 0
#+END_EXAMPLE

* [[https://leetcode.com/problems/valid-parentheses/][0020. Valid Parentheses]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Easy U:1853 D:0 AC:43.0% F:0.5976015164
#+end_quote

Given a string =s= containing just the characters ='('=, =')'=, ='{'=,
='}'=, ='['= and =']'=, determine if the input string is valid.

An input string is valid if:

1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.

 

*Example 1:*

#+BEGIN_EXAMPLE
  Input: s = "()"
  Output: true
#+END_EXAMPLE

*Example 2:*

#+BEGIN_EXAMPLE
  Input: s = "()[]{}"
  Output: true
#+END_EXAMPLE

*Example 3:*

#+BEGIN_EXAMPLE
  Input: s = "(]"
  Output: false
#+END_EXAMPLE

*Example 4:*

#+BEGIN_EXAMPLE
  Input: s = "([)]"
  Output: false
#+END_EXAMPLE

*Example 5:*

#+BEGIN_EXAMPLE
  Input: s = "{[]}"
  Output: true
#+END_EXAMPLE

 

*Constraints:*

- =1 <= s.length <= 104=
- =s= consists of parentheses only ='()[]{}'=.
** Hints
1. An interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.

<pre>
{ { } [ ] [ [ [ ] ] ] } is VALID expression
          [ [ [ ] ] ]    is VALID sub-expression
  { } [ ]                is VALID sub-expression
</pre>

Can we exploit this recursive structure somehow?
2. What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.

<pre>
{ { ( { } ) } }
      |_|

{ { (      ) } }
    |______|

{ {          } }
  |__________|

{                }
|________________|

VALID EXPRESSION!
</pre>
3. The <b>stack</b> data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards.
** Topic Tags
1. [[https://leetcode.com/tag/stack/][Stack]]
2. [[https://leetcode.com/tag/string/][String]]

** Similar Problems
*** [[https://leetcode.com/problems/generate-parentheses/][0022. Generate Parentheses]]
*** [[https://leetcode.com/problems/longest-valid-parentheses/][0032. Longest Valid Parentheses]]
*** [[https://leetcode.com/problems/remove-invalid-parentheses/][0301. Remove Invalid Parentheses]]
*** [[https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/][1003. Check If Word Is Valid After Substitutions]]
** Companies
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 30
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 23
*** 1. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 13
*** 1. [[https://leetcode-cn.com/company/bilibili/][哔哩哔哩]] * 12
*** 1. [[https://leetcode-cn.com/company/huawei/][华为]] * 11
*** 2. [[https://leetcode-cn.com/company/jpmorgan/][jpmorgan]] * 56
*** 2. [[https://leetcode-cn.com/company/linkedin/][领英 LinkedIn]] * 7
*** 2. [[https://leetcode-cn.com/company/adobe/][奥多比 Adobe]] * 3
*** 2. [[https://leetcode-cn.com/company/cisco/][思科 Cisco]] * 3
*** 2. [[https://leetcode-cn.com/company/intuit/][Intuit]] * 3
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 35
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 15
*** 3. [[https://leetcode-cn.com/company/twitter/][推特 Twitter]] * 14
*** 3. [[https://leetcode-cn.com/company/vmware/][VMware]] * 13
*** 3. [[https://leetcode-cn.com/company/zhan-xin-zhan-li/][展心展力]] * 6
* [[https://leetcode-cn.com/problems/valid-parentheses/][0020. 有效的括号]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Easy U:1853 D:0 AC:43.0% F:0.5976015164
#+end_quote

给定一个只包括
='('=，=')'=，='{'=，='}'=，='['=，=']'= 的字符串，判断字符串是否有效。

有效字符串需满足：

1. 左括号必须用相同类型的右括号闭合。
2. 左括号必须以正确的顺序闭合。

注意空字符串可被认为是有效字符串。

*示例 1:*

#+BEGIN_EXAMPLE
  输入: "()"
  输出: true
#+END_EXAMPLE

*示例 2:*

#+BEGIN_EXAMPLE
  输入: "()[]{}"
  输出: true
#+END_EXAMPLE

*示例 3:*

#+BEGIN_EXAMPLE
  输入: "(]"
  输出: false
#+END_EXAMPLE

*示例 4:*

#+BEGIN_EXAMPLE
  输入: "([)]"
  输出: false
#+END_EXAMPLE

*示例 5:*

#+BEGIN_EXAMPLE
  输入: "{[]}"
  输出: true
#+END_EXAMPLE
** Hints
1. An interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.

<pre>
{ { } [ ] [ [ [ ] ] ] } is VALID expression
          [ [ [ ] ] ]    is VALID sub-expression
  { } [ ]                is VALID sub-expression
</pre>

Can we exploit this recursive structure somehow?
2. What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.

<pre>
{ { ( { } ) } }
      |_|

{ { (      ) } }
    |______|

{ {          } }
  |__________|

{                }
|________________|

VALID EXPRESSION!
</pre>
3. The <b>stack</b> data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards.
** Topic Tags
1. [[https://leetcode-cn.com/tag/stack/][栈]]
2. [[https://leetcode-cn.com/tag/string/][字符串]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/generate-parentheses/][0022. 括号生成]]
*** [[https://leetcode-cn.com/problems/longest-valid-parentheses/][0032. 最长有效括号]]
*** [[https://leetcode-cn.com/problems/remove-invalid-parentheses/][0301. 删除无效的括号]]
*** [[https://leetcode-cn.com/problems/check-if-word-is-valid-after-substitutions/][1003. 检查替换后的词是否有效]]
** Companies
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 30
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 23
*** 1. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 13
*** 1. [[https://leetcode-cn.com/company/bilibili/][哔哩哔哩]] * 12
*** 1. [[https://leetcode-cn.com/company/huawei/][华为]] * 11
*** 2. [[https://leetcode-cn.com/company/jpmorgan/][jpmorgan]] * 56
*** 2. [[https://leetcode-cn.com/company/linkedin/][领英 LinkedIn]] * 7
*** 2. [[https://leetcode-cn.com/company/adobe/][奥多比 Adobe]] * 3
*** 2. [[https://leetcode-cn.com/company/cisco/][思科 Cisco]] * 3
*** 2. [[https://leetcode-cn.com/company/intuit/][Intuit]] * 3
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 35
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 15
*** 3. [[https://leetcode-cn.com/company/twitter/][推特 Twitter]] * 14
*** 3. [[https://leetcode-cn.com/company/vmware/][VMware]] * 13
*** 3. [[https://leetcode-cn.com/company/zhan-xin-zhan-li/][展心展力]] * 6
