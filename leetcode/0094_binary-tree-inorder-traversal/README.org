#+TITLE: 0094. Binary Tree Inorder Traversal
#+DATE: 2020-09-14 20:53
#+LAST_MODIFIED: 2020-09-14 23:47
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0094-binary-tree-inorder-traversal
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Stack Tree HashTable

* [[https://leetcode.com/problems/binary-tree-inorder-traversal/][0094. Binary Tree Inorder Traversal]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Medium U:697 D:0 AC:73.4% F:0.5494588738
#+end_quote

Given a binary tree, return the /inorder/ traversal of its nodes'
values.

*Example:*

#+BEGIN_EXAMPLE
  Input: [1,null,2,3]
     1
      \
       2
      /
     3

  Output: [1,3,2]
#+END_EXAMPLE

*Follow up:* Recursive solution is trivial, could you do it iteratively?
** Topic Tags
1. [[https://leetcode.com/tag/stack/][Stack]]
2. [[https://leetcode.com/tag/tree/][Tree]]
3. [[https://leetcode.com/tag/hash-table/][Hash Table]]

** Similar Problems
*** [[https://leetcode.com/problems/validate-binary-search-tree/][0098. Validate Binary Search Tree]]
*** [[https://leetcode.com/problems/binary-tree-preorder-traversal/][0144. Binary Tree Preorder Traversal]]
*** [[https://leetcode.com/problems/binary-tree-postorder-traversal/][0145. Binary Tree Postorder Traversal]]
*** [[https://leetcode.com/problems/binary-search-tree-iterator/][0173. Binary Search Tree Iterator]]
*** [[https://leetcode.com/problems/kth-smallest-element-in-a-bst/][0230. Kth Smallest Element in a BST]]
*** [[https://leetcode.com/problems/closest-binary-search-tree-value-ii/][0272. Closest Binary Search Tree Value II]]
*** [[https://leetcode.com/problems/inorder-successor-in-bst/][0285. Inorder Successor in BST]]
*** [[https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/][0426. Convert Binary Search Tree to Sorted Doubly Linked List]]
*** [[https://leetcode.com/problems/minimum-distance-between-bst-nodes/][0783. Minimum Distance Between BST Nodes]]
** Companies
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 12
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 7
*** 1. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 5
*** 1. [[https://leetcode-cn.com/company/tencent/][腾讯 Tencent]] * 4
*** 1. [[https://leetcode-cn.com/company/oracle/][甲骨文 Oracle]] * 3
*** 2. [[https://leetcode-cn.com/company/mi/][小米]] * 3
*** 2. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 3
*** 2. [[https://leetcode-cn.com/company/baidu/][百度]] * 2
*** 2. [[https://leetcode-cn.com/company/huawei/][华为]] * 2
*** 2. [[https://leetcode-cn.com/company/didi/][滴滴打车]] * 2
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 6
*** 3. [[https://leetcode-cn.com/company/adobe/][奥多比 Adobe]] * 3
*** 3. [[https://leetcode-cn.com/company/sap/][SAP 思爱普]] * 3
*** 3. [[https://leetcode-cn.com/company/yahoo/][雅虎 Yahoo]] * 2
*** 3. [[https://leetcode-cn.com/company/toutiao/][今日头条]] * 2
* [[https://leetcode-cn.com/problems/binary-tree-inorder-traversal/][0094. 二叉树的中序遍历]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Medium U:697 D:0 AC:73.4% F:0.5494588738
#+end_quote

给定一个二叉树，返回它的/中序 /遍历。

*示例:*

#+BEGIN_EXAMPLE
  输入: [1,null,2,3]
     1
      \
       2
      /
     3

  输出: [1,3,2]
#+END_EXAMPLE

*进阶:* 递归算法很简单，你可以通过迭代算法完成吗？
** Topic Tags
1. [[https://leetcode-cn.com/tag/stack/][栈]]
2. [[https://leetcode-cn.com/tag/tree/][树]]
3. [[https://leetcode-cn.com/tag/hash-table/][哈希表]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/validate-binary-search-tree/][0098. 验证二叉搜索树]]
*** [[https://leetcode-cn.com/problems/binary-tree-preorder-traversal/][0144. 二叉树的前序遍历]]
*** [[https://leetcode-cn.com/problems/binary-tree-postorder-traversal/][0145. 二叉树的后序遍历]]
*** [[https://leetcode-cn.com/problems/binary-search-tree-iterator/][0173. 二叉搜索树迭代器]]
*** [[https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/][0230. 二叉搜索树中第K小的元素]]
*** [[https://leetcode-cn.com/problems/closest-binary-search-tree-value-ii/][0272. 最接近的二叉搜索树值 II]]
*** [[https://leetcode-cn.com/problems/inorder-successor-in-bst/][0285. 二叉搜索树中的顺序后继]]
*** [[https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/][0426. 将二叉搜索树转化为排序的双向链表]]
*** [[https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/][0783. 二叉搜索树节点最小距离]]
** Companies
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 12
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 7
*** 1. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 5
*** 1. [[https://leetcode-cn.com/company/tencent/][腾讯 Tencent]] * 4
*** 1. [[https://leetcode-cn.com/company/oracle/][甲骨文 Oracle]] * 3
*** 2. [[https://leetcode-cn.com/company/mi/][小米]] * 3
*** 2. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 3
*** 2. [[https://leetcode-cn.com/company/baidu/][百度]] * 2
*** 2. [[https://leetcode-cn.com/company/huawei/][华为]] * 2
*** 2. [[https://leetcode-cn.com/company/didi/][滴滴打车]] * 2
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 6
*** 3. [[https://leetcode-cn.com/company/adobe/][奥多比 Adobe]] * 3
*** 3. [[https://leetcode-cn.com/company/sap/][SAP 思爱普]] * 3
*** 3. [[https://leetcode-cn.com/company/yahoo/][雅虎 Yahoo]] * 2
*** 3. [[https://leetcode-cn.com/company/toutiao/][今日头条]] * 2
