#+TITLE: 0501. Find Mode in Binary Search Tree
#+DATE: 2020-09-24 10:47
#+LAST_MODIFIED: 2020-09-24 10:47
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0501-find-mode-in-binary-search-tree
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Tree

* [[https://leetcode.com/problems/find-mode-in-binary-search-tree/][0501. Find Mode in Binary Search Tree]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Easy U:148 D:0 AC:46.0% F:0.1575578381
#+end_quote

Given a binary search tree (BST) with duplicates, find all the
[[https://en.wikipedia.org/wiki/Mode_(statistics)][mode(s)]] (the most
frequently occurred element) in the given BST.

Assume a BST is defined as follows:

- The left subtree of a node contains only nodes with keys *less than or
  equal to* the node's key.
- The right subtree of a node contains only nodes with keys *greater
  than or equal to* the node's key.
- Both the left and right subtrees must also be binary search trees.

 

For example:\\
Given BST =[1,null,2,2]=,

#+BEGIN_EXAMPLE
     1
      \
       2
      /
     2
#+END_EXAMPLE

 

return =[2]=.

*Note:* If a tree has more than one mode, you can return them in any
order.

*Follow up:* Could you do that without using any extra space? (Assume
that the implicit stack space incurred due to recursion does not count).
** Topic Tags
1. [[https://leetcode.com/tag/tree/][Tree]]

** Similar Problems
*** [[https://leetcode.com/problems/validate-binary-search-tree/][0098. Validate Binary Search Tree]]
** Companies
*** 2. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 3. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 2
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 0
*** 3. [[https://leetcode-cn.com/company/alibaba/][阿里巴巴]] * 0
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 0
*** 3. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 0
* [[https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/][0501. 二叉搜索树中的众数]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Easy U:148 D:0 AC:46.0% F:0.1575578381
#+end_quote

给定一个有相同值的二叉搜索树（BST），找出 BST
中的所有众数（出现频率最高的元素）。

假定 BST 有如下定义：

- 结点左子树中所含结点的值小于等于当前结点的值
- 结点右子树中所含结点的值大于等于当前结点的值
- 左子树和右子树都是二叉搜索树

例如：\\
给定 BST =[1,null,2,2]=,

#+BEGIN_EXAMPLE
     1
      \
       2
      /
     2
#+END_EXAMPLE

=返回[2]=.

*提示*：如果众数超过1个，不需考虑输出顺序

*进阶：*你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）
** Topic Tags
1. [[https://leetcode-cn.com/tag/tree/][树]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/validate-binary-search-tree/][0098. 验证二叉搜索树]]
** Companies
*** 2. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 3. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 2
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 0
*** 3. [[https://leetcode-cn.com/company/alibaba/][阿里巴巴]] * 0
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 0
*** 3. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 0
