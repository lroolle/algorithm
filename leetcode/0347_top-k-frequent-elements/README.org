#+TITLE: 0347. Top K Frequent Elements
#+DATE: 2020-10-12 13:28
#+LAST_MODIFIED: 2020-10-12 13:28
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0347-top-k-frequent-elements
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms HashTable Heap

* [[https://leetcode.com/problems/top-k-frequent-elements/][0347. Top K Frequent Elements]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Medium U:3819 D:231 AC:61.7% F:0
#+end_quote

Given a non-empty array of integers, return the */k/* most frequent
elements.

*Example 1:*

#+BEGIN_EXAMPLE
  Input: nums = [1,1,1,2,2,3], k = 2
  Output: [1,2]
#+END_EXAMPLE

*Example 2:*

#+BEGIN_EXAMPLE
  Input: nums = [1], k = 1
  Output: [1]
#+END_EXAMPLE

*Note:*

- You may assume /k/ is always valid, 1 ≤ /k/ ≤ number of unique
  elements.
- Your algorithm's time complexity *must be* better than O(/n/ log /n/),
  where /n/ is the array's size.
- It's guaranteed that the answer is unique, in other words the set of
  the top k frequent elements is unique.
- You can return the answer in any order.
** Topic Tags
1. [[https://leetcode.com/tag/hash-table/][Hash Table]]
2. [[https://leetcode.com/tag/heap/][Heap]]

** Similar Problems
*** [[https://leetcode.com/problems/word-frequency/][0192. Word Frequency]]
*** [[https://leetcode.com/problems/kth-largest-element-in-an-array/][0215. Kth Largest Element in an Array]]
*** [[https://leetcode.com/problems/sort-characters-by-frequency/][0451. Sort Characters By Frequency]]
*** [[https://leetcode.com/problems/split-array-into-consecutive-subsequences/][0659. Split Array into Consecutive Subsequences]]
*** [[https://leetcode.com/problems/top-k-frequent-words/][0692. Top K Frequent Words]]
*** [[https://leetcode.com/problems/k-closest-points-to-origin/][0973. K Closest Points to Origin]]

* [[https://leetcode-cn.com/problems/top-k-frequent-elements/][0347. 前 K 个高频元素]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Medium U:541 D:0 AC:61.7% F:0
#+end_quote

给定一个非空的整数数组，返回其中出现频率前 */k /*高的元素。

 

*示例 1:*

#+BEGIN_EXAMPLE
  输入: nums = [1,1,1,2,2,3], k = 2
  输出: [1,2]
#+END_EXAMPLE

*示例 2:*

#+BEGIN_EXAMPLE
  输入: nums = [1], k = 1
  输出: [1]
#+END_EXAMPLE

 

*提示：*

- 你可以假设给定的 /k /总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
- 你的算法的时间复杂度*必须*优于 O(/n/ log /n/) , /n /是数组的大小。
- 题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。
- 你可以按任意顺序返回答案。
** Topic Tags
1. [[https://leetcode-cn.com/tag/heap/][堆]]
2. [[https://leetcode-cn.com/tag/hash-table/][哈希表]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/word-frequency/][0192. 统计词频]]
*** [[https://leetcode-cn.com/problems/kth-largest-element-in-an-array/][0215. 数组中的第K个最大元素]]
*** [[https://leetcode-cn.com/problems/sort-characters-by-frequency/][0451. 根据字符出现频率排序]]
*** [[https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences/][0659. 分割数组为连续子序列]]
*** [[https://leetcode-cn.com/problems/top-k-frequent-words/][0692. 前K个高频单词]]
*** [[https://leetcode-cn.com/problems/k-closest-points-to-origin/][0973. 最接近原点的 K 个点]]

