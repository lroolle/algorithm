#+TITLE: 0117. Populating Next Right Pointers in Each Node II
#+DATE: 2020-09-28 21:38
#+LAST_MODIFIED: 2020-09-28 21:38
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0117-populating-next-right-pointers-in-each-node-ii
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Tree DepthfirstSearch

* [[https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/][0117. Populating Next Right Pointers in Each Node II]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Medium U:275 D:0 AC:57.8% F:0.2097962341
#+end_quote

Given a binary tree

#+BEGIN_EXAMPLE
  struct Node {
    int val;
    Node *left;
    Node *right;
    Node *next;
  }
#+END_EXAMPLE

Populate each next pointer to point to its next right node. If there is
no next right node, the next pointer should be set to =NULL=.

Initially, all next pointers are set to =NULL=.

 

*Follow up:*

- You may only use constant extra space.
- Recursive approach is fine, you may assume implicit stack space does
  not count as extra space for this problem.

 

*Example 1:*

[[https://assets.leetcode.com/uploads/2019/02/15/117_sample.png]]

#+BEGIN_EXAMPLE
  Input: root = [1,2,3,4,5,null,7]
  Output: [1,#,2,3,#,4,5,7,#]
  Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
#+END_EXAMPLE

 

*Constraints:*

- The number of nodes in the given tree is less than =6000=.
- =-100 <= node.val <= 100=
** Topic Tags
1. [[https://leetcode.com/tag/tree/][Tree]]
2. [[https://leetcode.com/tag/depth-first-search/][Depth-first Search]]

** Similar Problems
*** [[https://leetcode.com/problems/populating-next-right-pointers-in-each-node/][0116. Populating Next Right Pointers in Each Node]]
** Companies
*** 1. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 7
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 7
*** 1. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 4
*** 1. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 23
*** 3. [[https://leetcode-cn.com/company/oracle/][甲骨文 Oracle]] * 2
*** 3. [[https://leetcode-cn.com/company/alibaba/][阿里巴巴]] * 0
*** 3. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 0
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 0
* [[https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/][0117. 填充每个节点的下一个右侧节点指针 II]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Medium U:275 D:0 AC:57.8% F:0.2097962341
#+end_quote

给定一个二叉树

#+BEGIN_EXAMPLE
  struct Node {
    int val;
    Node *left;
    Node *right;
    Node *next;
  }
#+END_EXAMPLE

填充它的每个 next
指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将
next 指针设置为 =NULL=。

初始状态下，所有 next 指针都被设置为 =NULL=。

 

*进阶：*

- 你只能使用常量级额外空间。
- 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。

 

*示例：*

[[https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png]]

#+BEGIN_EXAMPLE
  输入：root = [1,2,3,4,5,null,7]
  输出：[1,#,2,3,#,4,5,7,#]
  解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。
#+END_EXAMPLE

 

*提示：*

- 树中的节点数小于 =6000=
- =-100 <= node.val <= 100=

 
** Topic Tags
1. [[https://leetcode-cn.com/tag/tree/][树]]
2. [[https://leetcode-cn.com/tag/depth-first-search/][深度优先搜索]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/][0116. 填充每个节点的下一个右侧节点指针]]
** Companies
*** 1. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 7
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 7
*** 1. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 4
*** 1. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 23
*** 3. [[https://leetcode-cn.com/company/oracle/][甲骨文 Oracle]] * 2
*** 3. [[https://leetcode-cn.com/company/alibaba/][阿里巴巴]] * 0
*** 3. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 0
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 0
