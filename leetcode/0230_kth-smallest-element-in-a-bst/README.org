#+TITLE: 0230. Kth Smallest Element in a BST
#+DATE: 2020-09-16 23:07
#+LAST_MODIFIED: 2020-09-16 23:07
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0230-kth-smallest-element-in-a-bst
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Tree BinarySearch

* [[https://leetcode.com/problems/kth-smallest-element-in-a-bst/][0230. Kth Smallest Element in a BST]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Medium U:278 D:0 AC:71.9% F:0.1280847747
#+end_quote

Given a binary search tree, write a function =kthSmallest= to find the
*k*th smallest element in it.

 

*Example 1:*

#+BEGIN_EXAMPLE
  Input: root = [3,1,4,null,2], k = 1
     3
    / \
   1   4
    \
     2
  Output: 1
#+END_EXAMPLE

*Example 2:*

#+BEGIN_EXAMPLE
  Input: root = [5,3,6,2,4,null,null,1], k = 3
         5
        / \
       3   6
      / \
     2   4
    /
   1
  Output: 3
#+END_EXAMPLE

*Follow up:*\\
What if the BST is modified (insert/delete operations) often and you
need to find the kth smallest frequently? How would you optimize the
kthSmallest routine?

 

*Constraints:*

- The number of elements of the BST is between =1= to =10^4=.
- You may assume =k= is always valid, =1 ≤ k ≤ BST's total elements=.
** Hints
1. Try to utilize the property of a BST.
2. Try in-order traversal. (Credits to @chan13)
3. What if you could modify the BST node's structure?
4. The optimal runtime complexity is O(height of BST).
** Topic Tags
1. [[https://leetcode.com/tag/tree/][Tree]]
2. [[https://leetcode.com/tag/binary-search/][Binary Search]]

** Similar Problems
*** [[https://leetcode.com/problems/binary-tree-inorder-traversal/][0094. Binary Tree Inorder Traversal]]
*** [[https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/][0671. Second Minimum Node In a Binary Tree]]
** Companies
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 10
*** 1. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 5
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 2
*** 1. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 1. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 2
*** 2. [[https://leetcode-cn.com/company/hulu/][Hulu]] * 2
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 7
*** 3. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 6
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 5
*** 3. [[https://leetcode-cn.com/company/tencent/][腾讯 Tencent]] * 2
*** 3. [[https://leetcode-cn.com/company/vmware/][VMware]] * 2
* [[https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/][0230. 二叉搜索树中第K小的元素]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Medium U:278 D:0 AC:71.9% F:0.1280847747
#+end_quote

给定一个二叉搜索树，编写一个函数 =kthSmallest= 来查找其中第 *k *个最小的元素。

*说明：*\\
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

*示例 1:*

#+BEGIN_EXAMPLE
  输入: root = [3,1,4,null,2], k = 1
     3
    / \
   1   4
    \
     2
  输出: 1
#+END_EXAMPLE

*示例 2:*

#+BEGIN_EXAMPLE
  输入: root = [5,3,6,2,4,null,null,1], k = 3
         5
        / \
       3   6
      / \
     2   4
    /
   1
  输出: 3
#+END_EXAMPLE

*进阶：*\\
如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k
小的值，你将如何优化 =kthSmallest= 函数？
** Hints
1. Try to utilize the property of a BST.
2. Try in-order traversal. (Credits to @chan13)
3. What if you could modify the BST node's structure?
4. The optimal runtime complexity is O(height of BST).
** Topic Tags
1. [[https://leetcode-cn.com/tag/tree/][树]]
2. [[https://leetcode-cn.com/tag/binary-search/][二分查找]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/binary-tree-inorder-traversal/][0094. 二叉树的中序遍历]]
*** [[https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/][0671. 二叉树中第二小的节点]]
** Companies
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 10
*** 1. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 5
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 2
*** 1. [[https://leetcode-cn.com/company/google/][谷歌 Google]] * 2
*** 1. [[https://leetcode-cn.com/company/apple/][苹果 Apple]] * 2
*** 2. [[https://leetcode-cn.com/company/hulu/][Hulu]] * 2
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 7
*** 3. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 6
*** 3. [[https://leetcode-cn.com/company/uber/][优步 Uber]] * 5
*** 3. [[https://leetcode-cn.com/company/tencent/][腾讯 Tencent]] * 2
*** 3. [[https://leetcode-cn.com/company/vmware/][VMware]] * 2
