#+TITLE: 0106. Construct Binary Tree from Inorder and Postorder Traversal
#+DATE: 2020-09-25 10:45
#+LAST_MODIFIED: 2020-09-25 10:45
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 0106-construct-binary-tree-from-inorder-and-postorder-traversal
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Tree DepthfirstSearch Array

* [[https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/][0106. Construct Binary Tree from Inorder and Postorder Traversal]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Medium U:300 D:0 AC:69.7% F:0.2819654379
#+end_quote

Given inorder and postorder traversal of a tree, construct the binary
tree.

*Note:*\\
You may assume that duplicates do not exist in the tree.

For example, given

#+BEGIN_EXAMPLE
  inorder = [9,3,15,20,7]
  postorder = [9,15,7,20,3]
#+END_EXAMPLE

Return the following binary tree:

#+BEGIN_EXAMPLE
      3
     / \
    9  20
      /  \
     15   7
#+END_EXAMPLE
** Topic Tags
1. [[https://leetcode.com/tag/tree/][Tree]]
2. [[https://leetcode.com/tag/depth-first-search/][Depth-first Search]]
3. [[https://leetcode.com/tag/array/][Array]]

** Similar Problems
*** [[https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/][0105. Construct Binary Tree from Preorder and Inorder Traversal]]
** Companies
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 5
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 2
*** 1. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 2
*** 3. [[https://leetcode-cn.com/company/alibaba/][阿里巴巴]] * 3
*** 3. [[https://leetcode-cn.com/company/qunar/][去哪儿]] * 3
*** 3. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 3
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 3
*** 3. [[https://leetcode-cn.com/company/twitter/][推特 Twitter]] * 2
* [[https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/][0106. 从中序与后序遍历序列构造二叉树]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Medium U:300 D:0 AC:69.7% F:0.2819654379
#+end_quote

根据一棵树的中序遍历与后序遍历构造二叉树。

*注意:*\\
你可以假设树中没有重复的元素。

例如，给出

#+BEGIN_EXAMPLE
  中序遍历 inorder = [9,3,15,20,7]
  后序遍历 postorder = [9,15,7,20,3]
#+END_EXAMPLE

返回如下的二叉树：

#+BEGIN_EXAMPLE
      3
     / \
    9  20
      /  \
     15   7
#+END_EXAMPLE
** Topic Tags
1. [[https://leetcode-cn.com/tag/tree/][树]]
2. [[https://leetcode-cn.com/tag/depth-first-search/][深度优先搜索]]
3. [[https://leetcode-cn.com/tag/array/][数组]]

** Similar Problems
*** [[https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/][0105. 从前序与中序遍历序列构造二叉树]]
** Companies
*** 1. [[https://leetcode-cn.com/company/amazon/][亚马逊 Amazon]] * 5
*** 1. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 2
*** 1. [[https://leetcode-cn.com/company/microsoft/][微软 Microsoft]] * 2
*** 3. [[https://leetcode-cn.com/company/alibaba/][阿里巴巴]] * 3
*** 3. [[https://leetcode-cn.com/company/qunar/][去哪儿]] * 3
*** 3. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 3
*** 3. [[https://leetcode-cn.com/company/bloomberg/][彭博 Bloomberg]] * 3
*** 3. [[https://leetcode-cn.com/company/twitter/][推特 Twitter]] * 2
