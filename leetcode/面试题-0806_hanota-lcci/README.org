#+TITLE: 面试题 08.06. Hanota LCCI
#+DATE: 2020-09-28 17:20
#+LAST_MODIFIED: 2020-09-28 17:20
#+STARTUP: overview
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+EXPORT_FILE_NAME: 面试题-08.06-hanota-lcci
#+HUGO_BASE_DIR:~/G/blog
#+HUGO_SECTION: leetcode
#+HUGO_CATEGORIES:leetcode
#+HUGO_TAGS: Leetcode Algorithms Recursion

* Solution

** Solution I: Recursion
- ~n=2~
#+BEGIN_EXAMPLE
        A   B   C
        1
        0


Step1:  0   1        A->B

Step2:      1   0    A->C

                1
Step3:          0    B->C

#+END_EXAMPLE

- ~n=3~
#+BEGIN_EXAMPLE

         A   B   C   From->To
         2
         1
         0

         1
Step-2:  0   2       A->B

Step-1:  0   2   1   A->C

                 2
Step 0:  0       1   B->C


n=n-1
----------------------------------

             2
Step 1:  0   1       A->B

             2
Step 2:      1   0   A->C

                 2
                 1
Step 3:          0   B->C
#+END_EXAMPLE

In which ~Step 1 -> Step 3~ is a recursive process.

1. Case ~n == 1~: move from ~A~ to ~C~ (where recursion returns);
2. Case ~n  > 1~:
   a. move ~n-1~ from ~A~ to ~B~;
   b. move  ~n1~ from ~A~ to ~C~;
   c. move ~n-1~ from ~B~ to ~C~;

#+BEGIN_SRC go :exports both :imports "fmt"
var steps int
func hanoi(n int, A, B, C string)  {
	if n == 1 {
		steps++
		fmt.Printf("Move From %s->%s\n", A, C)
		return
	}
	hanoi(n-1, A, C, B)
	hanoi(1, A, B, C)
	hanoi(n-1, B, A, C)
}

func main() {
	hanoi(3, "A", "B", "C")
	fmt.Printf("Moved %d steps\n", steps)
}
#+END_SRC

#+RESULTS:
: Move From A->C
: Move From A->B
: Move From C->B
: Move From A->C
: Move From B->A
: Move From B->C
: Move From A->C
: Moved 7 steps


* [[https://leetcode.com/problems/hanota-lcci/][面试题 08.06. Hanota LCCI]]
:PROPERTIES:
:VISIBILITY: children
:END:

#+begin_quote
Easy U:50 D:0 AC:64.1% F:0.7472144018
#+end_quote

In the classic problem of the Towers of Hanoi, you have 3 towers and N
disks of different sizes which can slide onto any tower. The puzzle
starts with disks sorted in ascending order of size from top to bottom
(i.e., each disk sits on top of an even larger one). You have the
following constraints:

(1) Only one disk can be moved at a time.\\
(2) A disk is slid off the top of one tower onto another tower.\\
(3) A disk cannot be placed on top of a smaller disk.

Write a program to move the disks from the first tower to the last using
stacks.

*Example1:*

#+BEGIN_EXAMPLE
   Input: A = [2, 1, 0], B = [], C = []
   Output: C = [2, 1, 0]
#+END_EXAMPLE

*Example2:*

#+BEGIN_EXAMPLE
   Input: A = [1, 0], B = [], C = []
   Output: C = [1, 0]
#+END_EXAMPLE

*Note:*

1. =A.length <= 14=
** Hints
1. 尝试简单构建法。
2. 你可以很容易地把最小的圆盘从一根柱子移到另一根柱子。把最小的两个圆盘从一根柱子移到另一根柱子也是小菜一碟。你能移动最小的三个圆盘吗？
3. 考虑将最小的圆盘从柱X = 0 移动到柱Y = 2，使用柱Z = 1作为临时保留点，作为f(1, X = 0, Y = 2, Z = 1)的解题方案。移动最小的两个圆盘来表示f(2, X = 0, Y = 2, Z = 1)。给定你f(1, X = 0, Y = 2, Z = 1)和f(2, X = 0, Y = 2, Z = 1)的题目解法，你能解出f(3, X = 0, Y = 2, Z = 1)吗？
4. 请注意，哪根柱子是源、目的地或暂存点并不重要。你可以通过f(2, X = 0, Y = 2, Z = 1)来计算f(2, X = 0, Y = 1, Z = 2)（将两个盘子从柱0移动到柱1，以柱2作为暂存点），然后将盘子3从柱0移动到柱2，计算f(2, X = 1, Y = 2, Z = 0)（将两个盘子从柱1移动到柱2，以柱0作为暂存点）。这个过程是怎样重复的？
5. 如果你在递归方面遇到困难，请尝试更多地相信递归过程。一旦弄清如何将前2个盘子从柱0移至柱2，就可以相信你完成了这项工作。当需要移动3个盘子时，请相信你可以将2个盘子从一根柱子移动到另一根柱子。现在，你已经移动了2个盘子。那么要如何处理第三个盘子呢？
** Topic Tags
1. [[https://leetcode.com/tag/recursion/][Recursion]]
** Companies
*** 2. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 2
*** 3. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 0
* [[https://leetcode-cn.com/problems/hanota-lcci/][面试题 08.06. 汉诺塔问题]]
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_quote
Easy U:50 D:0 AC:64.1% F:0.7472144018
#+end_quote

在经典汉诺塔问题中，有 3 根柱子及 N
个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:\\
(1) 每次只能移动一个盘子;\\
(2) 盘子只能从柱子顶端滑出移到下一根柱子;\\
(3) 盘子只能叠在比它大的盘子上。

请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。

你需要原地修改栈。

*示例1:*

#+BEGIN_EXAMPLE
   输入：A = [2, 1, 0], B = [], C = []
   输出：C = [2, 1, 0]
#+END_EXAMPLE

*示例2:*

#+BEGIN_EXAMPLE
   输入：A = [1, 0], B = [], C = []
   输出：C = [1, 0]
#+END_EXAMPLE

*提示:*

1. A中盘子的数目不大于14个。
** Hints
1. 尝试简单构建法。
2. 你可以很容易地把最小的圆盘从一根柱子移到另一根柱子。把最小的两个圆盘从一根柱子移到另一根柱子也是小菜一碟。你能移动最小的三个圆盘吗？
3. 考虑将最小的圆盘从柱X = 0 移动到柱Y = 2，使用柱Z = 1作为临时保留点，作为f(1, X = 0, Y = 2, Z = 1)的解题方案。移动最小的两个圆盘来表示f(2, X = 0, Y = 2, Z = 1)。给定你f(1, X = 0, Y = 2, Z = 1)和f(2, X = 0, Y = 2, Z = 1)的题目解法，你能解出f(3, X = 0, Y = 2, Z = 1)吗？
4. 请注意，哪根柱子是源、目的地或暂存点并不重要。你可以通过f(2, X = 0, Y = 2, Z = 1)来计算f(2, X = 0, Y = 1, Z = 2)（将两个盘子从柱0移动到柱1，以柱2作为暂存点），然后将盘子3从柱0移动到柱2，计算f(2, X = 1, Y = 2, Z = 0)（将两个盘子从柱1移动到柱2，以柱0作为暂存点）。这个过程是怎样重复的？
5. 如果你在递归方面遇到困难，请尝试更多地相信递归过程。一旦弄清如何将前2个盘子从柱0移至柱2，就可以相信你完成了这项工作。当需要移动3个盘子时，请相信你可以将2个盘子从一根柱子移动到另一根柱子。现在，你已经移动了2个盘子。那么要如何处理第三个盘子呢？
** Topic Tags
1. [[https://leetcode-cn.com/tag/recursion/][递归]]
** Companies
*** 2. [[https://leetcode-cn.com/company/bytedance/][字节跳动]] * 2
*** 3. [[https://leetcode-cn.com/company/facebook/][Facebook 脸书]] * 0
